### Bubble Sort

One of the rudimentary sorting algorithms in CS.

Given an array of numbers, Bubble Sort sorts the contents in increasing order by "bubbling up" numbers to their correct position.

### Process

Bubble sort makes n - 1 passes over the array where n is the number of elements in the array.
For each loop, it swaps two consecutive numbers if they are out of order and continues doing so from the first to the last element of the array.

#### First Pass

[7 1 5 9 2] → [1 7 5 9 2]
[1 7 5 9 2] → [1 5 7 9 2]
[1 5 7 9 2] → [1 5 7 9 2]
[1 5 7 9 2] → [1 5 7 2 9]

#### Second Pass

[1 5 7 2 9] → [1 5 7 2 9]
[1 5 7 9 2] → [1 5 7 2 9]
[1 5 7 9 2] → [1 5 2 7 9]
[1 5 2 7 9] → [1 5 2 7 9]

#### Third Pass

[1 5 2 7 9] → [1 5 2 7 9]
[1 5 2 7 9] → [1 2 5 7 9]
[1 2 5 7 9] → [1 2 5 7 9]
[1 2 5 7 9] → [1 2 5 7 9]

#### Fourth Pass

[1 2 5 7 9] → [1 2 5 7 9]
[1 2 5 7 9] → [1 2 5 7 9]
[1 2 5 7 9] → [1 2 5 7 9]
[1 2 5 7 9] → [1 2 5 7 9]

### Ideas

Since bubble sort bubbles the largest numbers to the end of the array, it is guaranteed that it will put at least one element in the correct position for each sweep.
Not only that, we're guaranteed that the fixed index will be the last index that has yet to be fixed.

### Analysis

In order to sort the array, we needed to perform the bubbling up action for
each element in the array. That is to say we performed n bubbling operations.
Per iteration, we moved the respective elements through n positions. That is to
say we moved n number of steps n times, therefore we get a runtime of n*n = n^2
= O(n^2). This has a space complexity of O(n) since it is an in-place sort (no
new arrays are created).

