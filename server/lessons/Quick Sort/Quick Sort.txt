### QUICKSORT
### How it works:
Like Merge sort, quick sort is also a divide and conquer algorithm. The sorting in quick sort is carried through a partition algorithm by considering usually the first element as a pivot and then splitting the array as left and right partition. However, you can either choose the last, first, median or a random element as pivot.

### Steps involved: 
(Here example is solved by using the first element as the pivot)  

1. Consider the first element as the pivot. (a[low])  

2. Initialize the “i” to low index and “j” to high index  
 
3. Repeat the following steps until i < j  

	1. Keep on incrementing “i” while a[i] <= pivot  
	
	2. Keep on decrementing “j” while a[j] >= pivot  
	 
	3. If (i < j) then swap (a[i], a[j])  
	
    iv. If (i > j) then swap (a[j], pivot)

### Example #1:
Let us consider the following array arr[ ] = {30, 20, 10, 50, 60, 40}  

#### 1st step:  

Considering the first element as pivot, a[0] = pivot  

      -------------------------------
      | 30 | 20 | 10 | 50 | 60 | 40 |
      -------------------------------

Considering the index position i = 0, j = 5 we can say that i < j.  

(i)We keep on incrementing “i” while a[i] <= pivot  

Starting from i = 0,  

	   a [0] < pivot (true)  i++ 
		a[1] < pivot (true) i++ 
		a[2] < pivot (true) i++
		a[3] < pivot (false) terminate (terminated at i = 3)

(ii)We keep on decrementing “j” while a[j] >= pivot  

Starting from j = 5,  

		a[5] > pivot (true) j-- 
		a [4] > pivot (true) j-- 
		a [3] > pivot (true) j-- 
		a[2] > pivot (false) terminate (terminated at j = 2)

(iii)Since, (i > j) we swap (a[j], pivot)  

Final array after step 1:  

      --------------------------------
      |  10 | 20 | 30 | 50 | 60 | 40 |
      ---------------------------------

#### 2nd step:  

Considering “30” as the pivot, now the array can be divided into left and right partition respectively.  

Considering the elements in the left partition to be 10, 20.  

Considering the elements in the right partition to be 50, 60, 40.  


Solving the left partition:  

    -----------
    | 10 | 20 |
    -----------

Now considering the pivot as the first element of the array, therefore pivot = 10  

(i)We keep on incrementing “i” while a[i] <= pivot  

Starting from i = 0,  

		a[0] <= pivot (true) i++
		a[1] < pivot (false) terminate (terminated at i = 1)
(ii)We keep on decrementing “j” while a[j] >= pivot  

Starting from j = 1,  

    a[1]  >= pivot (true) j-- 
    a[0] > pivot (false) terminate (terminated at j = 0)

(iii)Since, (i > j) we swap (a[j], pivot)  

Final array after step 2:  

    -----------
    | 10 | 20 |
    -----------

#### 3rd step:  

Now considering the right partition, let us sort the elements in the right partition:  

    ----------------
    | 50 | 60 | 40 |
    ----------------

Now considering the pivot as the first element of the array, therefore pivot = 50  

(i)We keep on incrementing “i” while a[i] <= pivot  

Starting from i = 0,  

		a[0] <= pivot (true) i++
		a[1] < pivot (false) terminate (terminated at i = 1)
(ii)We keep on decrementing “j” while a[j] >= pivot  

Starting from j = 2,  

		a[2] > pivot (false) terminated (terminated at j = 2) 
(iii)Since, (i <  j) we swap (a[i], a[j])  

      ----------------
      | 50 | 40 | 60 |
      ----------------

#### 4th step:  
 
Considering the above array, let us consider the pivot to be first element, therefore pivot = 50  

    ----------------
    | 50 | 40 | 60 |
    ----------------

(i)We keep on incrementing “i” while a[i] <= pivot  

Starting from i = 0,  

	a[0] <= pivot (true) i++
	a[1] < pivot (true) i++
	a[2] < pivot (false) terminated (terminated at i = 2)
(ii)We keep on decrementing “j” while a[j] >= pivot  

Starting from j = 2,  

		a[2] >= pivot (true) j- -  
		a[1] > pivot (false) terminated (terminated at j = 1)
(iii)Since, (i >  j) we swap (a[j], pivot)  

Array after swapping:  

    ----------------
    | 40 | 50 | 60 |
    ----------------

Now considering the above array, and considering “50” as pivot the array can be further splitted into left and right partition, but since the left and right partitioned array contains only one element, therefore the left and right array is sorted.  


Therefore the final sorted array is:  

    -------------------------------
    | 10 | 20 | 30 | 40 | 50 | 60 |
    -------------------------------

### Analysis:  

Time Complexity:O(N logN), O(N<sup>2</sup>)  

The best case runtime for quick sort is O(N logN) and the worst case runtime is O(N<sup>2</sup>). In the best case, the quick sort algorithm divides the array into further subarrays using the pivot element and then recursively sorts these subarrays. Hence resulting in overall time complexity as O(N logN) where “N” is the number of elements. In the worst case, the quick sort algorithm can take up to O(N2) because if the selected pivot is the lowest or the highest number of the array then it results into unbalanced partitions and recursive calls.

Space complexity:O(logN), O(N)  

The best case runtime for quick sort is O(logN) and the worst case is O(N). During the recursive calls of the stacks, the maximum depth of the call is logN because each partition reduces the size of the subarrays by half.



