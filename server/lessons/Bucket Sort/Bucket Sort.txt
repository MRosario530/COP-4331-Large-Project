### BUCKET SORT
### How it works:
The bucket sort algorithm works by dividing the unsorted array elements into different groups named as buckets. Finally, all the sorted buckets are combined to form the final sorted array. The process of sorting the unsorted elements and then combining all the sorted elements is also known as ‘scatter-gather approach’.

### Example #1:  

Let us consider the following array:  

      --------------------------------------------------
      | 0.42 | 0.32 | 0.23 | 0.52 | 0.25 | 0.47 | 0.51 | 
      --------------------------------------------------

#### Step 1:  

We create an input array of size 10. Assuming that each array position is a bucket.  

      -----------------------------------------
      | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 |
      -----------------------------------------

#### Step 2:  

Insert all the elements into the buckets from the array. For example, if the input element is ‘0.23’, considering the size of the array, (array size = 10), we multiply the input element with the size of the array (0.23 * 10 = 2.3). Taking the integer value we store the input element ‘0.23’ into the bucket ‘2’.  

      --------------------------------------------------
      | 0 | 0 | 0.23, 0.25 | 0 | 0 | 0 | 0 | 0 | 0 | 0 |
      --------------------------------------------------

#### Step 3:  

Simialrly, all the other elements are inserted into their respective buckets.  

      -----------------------------------------------------------------------
      | 0 | 0 | 0.23, 0.25 | 0.32 | 0.42, 0.47 | 0.52, 0.51 | 0 | 0 | 0 | 0 |
      -----------------------------------------------------------------------

#### Step 4:  

Finally sorting the elements placed inside the respective buckets.  

      -----------------------------------------------------------------------
      | 0 | 0 | 0.23, 0.25 | 0.32 | 0.42, 0.47 | 0.51, 0.52 | 0 | 0 | 0 | 0 |
      -----------------------------------------------------------------------

#### Step 5:  

Final structure of the array:  

      --------------------------------------------------
      | 0.23 | 0.25 | 0.32 | 0.42 | 0.47 | 0.51 | 0.52 | 
      --------------------------------------------------

### Analysis:  

Time Complexity: O(n + k), O(n<sup>2</sup>)  

The best case runtime for bucket sort is O(n + k)  and the worst case is O(n<sup>2</sup>). The best case runtime occurs when the elements are uniformly distributed in the buckets. O(n) is the runtime taken for building the buckets and O(k) is the runtime taken for sorting the elements. The worst case occurs when the input elements are in the close range. Since this results in placing of more elements into the same buckets.

Space Complexity: O(n + k)  

The space complexity for bucket sort is O(n + k) where ‘n’ is the number of elements and ‘k’ is the number of buckets used.
